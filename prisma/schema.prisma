// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Access {
  id          String     @id @default(cuid()) // @map("_id")
  containerId String?
  container   Container? @relation(fields: [containerId], references: [id])
  contentId   String?
  content     Content?   @relation(fields: [contentId], references: [id])
  roleId      String
  role        Role       @relation(fields: [roleId], references: [id])
}

enum MetadataType {
  APPLICATION_NAME
  AUTHOR
  DESCRIPTION
  GENERATOR
  KEYWORDS
  VIEWPORT
}

model Metadata {
  id            String     @id @default(cuid()) // @map("_id")
  name          String
  content       String
  containerId   String?
  container     Container? @relation(fields: [containerId], references: [id], name: "metadatas")
  contentId     String?
  contentLinked Content?   @relation(fields: [contentId], references: [id])
}

enum SectionType {
  PAGE
  HEADER
  TOP_BODY
  BOTTOM_BODY
  FOOTER
}

model Section {
  id                 String      @id @default(cuid()) // @map("_id")
  type               SectionType @default(PAGE)
  block              String?
  formId             String?
  form               Form?       @relation(fields: [formId], references: [id])
  containerId        String?
  container          Container?  @relation(fields: [containerId], references: [id], name: "sections")
  containerContentId String?
  containerContent   Container?  @relation(fields: [containerContentId], references: [id], name: "contentSections")
  contentId          String?
  contentLinked      Content?    @relation(fields: [contentId], references: [id])
  elementId          String?
  element            Element?    @relation(fields: [elementId], references: [id])
  position           Int
  content            Json?
}

model Element {
  id        String    @id @default(cuid()) // @map("_id")
  title     String    @unique
  block     String
  section   Section[]
  content   Json?
  status    Status    @default(AVAILABLE)
  updatedAt DateTime  @updatedAt
}

model Media {
  id         String         @id @default(cuid()) // @map("_id")
  uri        String         @unique
  mimeType   String
  name       String
  size       Int
  alt        String?
  usedIn     ContentField[]
  uploadTime DateTime       @default(now())
}

model User {
  id        String   @id @default(cuid()) // @map("_id")
  name      String?
  login     Login?
  updatedAt DateTime @updatedAt
}

model Login {
  id        String    @id @default(cuid()) // @map("_id")
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id])
  sessions  Session[]
  roleId    String    @default("user")
  role      Role      @relation(fields: [roleId], references: [id])
  email     String    @unique
  password  String
  updatedAt DateTime  @updatedAt
}

model Role {
  id        String   @id @default(cuid()) // @map("_id")
  name      String
  logins    Login[]
  Accesses  Access[]
  updatedAt DateTime @updatedAt
}

model Session {
  id        String   @id @default(cuid()) // @map("_id")
  token     String   @unique
  loginId   String
  login     Login    @relation(fields: [loginId], references: [id])
  expiresAt DateTime
  updatedAt DateTime @updatedAt
}

model Setting {
  id        String   @id @default(cuid()) // @map("_id")
  name      String   @unique
  value     String
  updatedAt DateTime @updatedAt
}

model Form {
  id        String      @id @default(cuid()) // @map("_id")
  title     String      @unique
  sendMail  Boolean     @default(false)
  sendTo    String?
  messages  Message[]
  fields    FormField[]
  sections  Section[]
  status    Status      @default(AVAILABLE)
  updatedAt DateTime    @updatedAt
}

enum FormFieldType {
  TEXT
  EMAIL
  PASSWORD
  PARAGRAPH
  OPTION
  CHECKBOX
  RADIO
  BUTTON
}

model FormField {
  id          String        @id @default(cuid()) // @map("_id")
  formId      String
  form        Form          @relation(fields: [formId], references: [id])
  name        String?
  type        FormFieldType
  label       String
  placeholder String?
  position    Int
  options     Json?
  required    Boolean?      @default(false)
}

model Message {
  id        String   @id @default(cuid()) // @map("_id")
  read      Boolean  @default(false)
  formId    String
  form      Form     @relation(fields: [formId], references: [id])
  value     Json
  createdAt DateTime @default(now())
}

enum Status {
  AVAILABLE
  DISCONTINUED
}

model Container {
  id                     String           @id @default(cuid()) // @map("_id")
  title                  String
  metadatas              Metadata[]       @relation(name: "metadatas")
  // slug               String?          @unique
  accesses               Access[]
  sections               Section[]        @relation(name: "sections")
  disableContentSections Boolean          @default(false)
  contentSections        Section[]        @relation(name: "contentSections")
  fields                 ContainerField[]
  contents               Content[]
  published              Boolean          @default(true)
  status                 Status           @default(AVAILABLE)
  updatedAt              DateTime         @updatedAt
  slug                   Slug?
  contentFields          ContainerField[] @relation(name: "linkedContentFields")
}

model Content {
  id          String         @id @default(cuid()) // @map("_id")
  title       String
  metadatas   Metadata[]
  accesses    Access[]
  fields      ContentField[] @relation(name: "contentLinked")
  sections    Section[]
  containerId String
  container   Container      @relation(fields: [containerId], references: [id])
  published   Boolean        @default(true)
  status      Status         @default(AVAILABLE)
  updatedAt   DateTime       @updatedAt
  slug        Slug?
  fieldsValue ContentField[] @relation(name: "contentValue")
}

enum ContainerFieldType {
  DATE
  BOOLEAN
  NUMBER
  LINK
  PARAGRAPH
  STRING
  IMAGE
  FILE
  VIDEO
  CONTENT
  OPTION
  RICHTEXT
  COLOR
  LOCATION
}

model ContainerField {
  id                String             @id @default(cuid()) // @map("_id")
  label             String
  name              String
  type              ContainerFieldType
  multiple          Boolean            @default(false)
  options           Json?
  min               Int?
  max               Int?
  containerId       String
  container         Container          @relation(fields: [containerId], references: [id])
  linkedContainerId String?
  linkedContainer   Container?         @relation(fields: [linkedContainerId], references: [id], name: "linkedContentFields")
  metadata          String?
  required          Boolean?           @default(false)
}

model ContentField {
  id          String             @id @default(cuid()) // @map("_id")
  name        String
  type        ContainerFieldType
  contentId   String?
  content     Content?           @relation(fields: [contentId], references: [id], name: "contentLinked")
  mediaId     String?
  media       Media?             @relation(fields: [mediaId], references: [id])
  textValue   String?
  numberValue Int?
  boolValue   Boolean?
  dateValue   DateTime?

  contentValueId String?
  contentValue   Content? @relation(fields: [contentValueId], references: [id], name: "contentValue")

  multiple Boolean        @default(false)
  parentId String?
  parent   ContentField?  @relation(fields: [parentId], references: [id], name: "list", onDelete: Cascade, onUpdate: NoAction)
  childs   ContentField[] @relation(name: "list")
}

model Slug {
  id       String  @id @default(cuid()) // @map("_id")
  full     String  @unique
  basic    String
  parentId String?
  parent   Slug?   @relation(fields: [parentId], references: [id], name: "childs", onDelete: NoAction, onUpdate: NoAction)
  childs   Slug[]  @relation(name: "childs")

  containerId String?    @unique
  container   Container? @relation(fields: [containerId], references: [id])
  contentId   String?    @unique
  content     Content?   @relation(fields: [contentId], references: [id])

  updatedAt DateTime @updatedAt
  published Boolean  @default(true)
}
